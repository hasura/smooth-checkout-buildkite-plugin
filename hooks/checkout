#!/usr/bin/env bash

set -eo pipefail

if [[ "$BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_SKIP_CHECKOUT" == "true" ]]; then
    echo "--- :fast_forward: Skipping checkout"
    echo "Because 'skip_checkout' configuration was set as true in pipeline YAML"
    exit 0
fi

echo "--- :open_file_folder: Setting up workspace"
echo "Creating directory: $BUILDKITE_BUILD_CHECKOUT_PATH"
mkdir -p "$BUILDKITE_BUILD_CHECKOUT_PATH" && cd "$BUILDKITE_BUILD_CHECKOUT_PATH"
echo "Setup completed successfully."

echo "--- :key: Setting up git and ssh"
if ! ssh-keygen -F github.com > /dev/null; then
  echo "github.com not found in known_hosts"
  mkdir -p /tmp
  TMP_FILE="$(mktemp /tmp/github_rsa.pub.XXXXXX)"
  ssh-keyscan -t rsa github.com > "$TMP_FILE"
  GH_PUBKEY_FINGERPRINT="$(ssh-keygen -lf "$TMP_FILE" | awk '{ print $2 }')"
  if [ "$GH_PUBKEY_FINGERPRINT" != "SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s" ]; then
    echo "FATAL: got wrong public key from keyscan"
    exit 1
  fi
  mkdir -p "$HOME/.ssh" && cat "$TMP_FILE" >> "$HOME/.ssh/known_hosts" && rm "$TMP_FILE"
  echo "github.com added to known_hosts"
fi

get_indirected_env() {
  local env_name="$1"

  env_ref="${env_name}"
  echo "${!env_ref}"
}

get_clone_flags() {
  local -n clone_flags_ref=$1
  local env_prefix="$2"

  temp_clone_flags="$(get_indirected_env "$env_prefix")"
  if [ -n "$temp_clone_flags" ]; then
    clone_flags_ref=("$temp_clone_flags")
    return
  fi

  local index=0
  while true; do
    temp_clone_flag=$(get_indirected_env "${env_prefix}_${index}")
    if [ -z "$temp_clone_flag" ]; then
      return
    fi
    clone_flags_ref+=("$temp_clone_flag")
    index=$((index+1))
  done
}

get_repo_name() {
  local repo_url="$1"
  echo "${repo_url%/}" | awk -F '/' '{ print $NF }' | sed -e "s/\.git$//"
}

setup_git_repo() {
  set +e
  local REPO_URL="$1"
  local CHECKOUT_REF="$2"
  local SSH_KEY_PATH="$3"
  local CLONE_DIR="$4"
  local -n CLONE_FLAGS=$5

  echo " :::: local clone location = '$CLONE_DIR'"
  echo " :::: checkout ref = '$CHECKOUT_REF'"
  echo " :::: git remote url = '$REPO_URL'"
  echo " :::: ssh key path = '$SSH_KEY_PATH'"
  echo " :::: clone flags = '${CLONE_FLAGS[@]}'"

  if [[ -n "$SSH_KEY_PATH" ]]; then
    GIT_SSH_COMMAND="ssh -i $SSH_KEY_PATH -o IdentitiesOnly=yes"
    export GIT_SSH_COMMAND
  fi

  mkdir -p "${CLONE_DIR}" && cd "${CLONE_DIR}"
  if [[ -d ".git" ]]; then
    echo "Git repository already exists."
    echo "So, doing a git clean and setting the remote URL"
    git clean -fdqx || \
      sudo git clean -fdqx && \
      git remote set-url origin "${REPO_URL}"
    local EXIT_STATUS=$?
  else
    echo "Cloning ${REPO_URL}"
    # shellcheck disable=SC2086
    git clone ${BUILDKITE_GIT_CLONE_FLAGS} "${CLONE_FLAGS[@]}" --no-checkout -- "$REPO_URL" .
    local EXIT_STATUS=$?
  fi
  if [[ $EXIT_STATUS -ne 0 ]]; then
    return $EXIT_STATUS
  fi

  if [ -z "${CHECKOUT_REF}" ]; then
    if [ -n "${BUILDKITE_TAG}" ]; then
      echo "Checking out tag: ${BUILDKITE_TAG}"
      git fetch --force origin "${BUILDKITE_TAG}" && \
        git checkout --quiet --force "${BUILDKITE_TAG}"
    else
      echo "Checking out branch: $BUILDKITE_BRANCH with $BUILDKITE_COMMIT"
      git fetch --force origin "$BUILDKITE_BRANCH" && \
        git checkout --quiet --force "$BUILDKITE_BRANCH" && \
        git reset --hard "$BUILDKITE_COMMIT"
    fi
  else
    echo "Checking out ref: $CHECKOUT_REF"
    git fetch --force origin "$CHECKOUT_REF" && \
      git checkout --quiet --force "$CHECKOUT_REF" && \
      git reset --hard FETCH_HEAD
  fi
  local EXIT_STATUS=$?
  unset GIT_SSH_COMAND
  if [[ $EXIT_STATUS -ne 0 ]]; then
    return $EXIT_STATUS
  fi

  git log -n 1 --format="Repo checked out at %h %s"
  set -e
}

checkout_repo() {
  local config_prefix="$1"
  local multiple_repos="$2"
  local index=0

  echo "--- :git: Checking out repository"
  while true; do
    echo "$index"
    url="$(get_indirected_env "${config_prefix}_${index}_URL")"
    if [ -z "${url}" ]; then
        exit 1
    fi

    ref="$(get_indirected_env "${config_prefix}_${index}_REF")"
    ssh_key_path="$(get_indirected_env "${config_prefix}_${index}_SSH_KEY_PATH")"

    declare -a clone_flags
    get_clone_flags clone_flags "${config_prefix}_${index}_CLONE_FLAGS"

    if [[ "${multiple_repos}" == "true" ]]; then
      clone_dir="$(get_repo_name "${url}")"
    else
      clone_dir="."
    fi

    setup_git_repo "$url" "$ref" "$ssh_key_path" "$clone_dir" clone_flags

    EXIT_STATUS=$?
    if [[ $EXIT_STATUS -eq 0 ]]; then
      break
    fi
    index=$((index+=1))
  done
}

PLUGIN_PREFIX="BUILDKITE_PLUGIN_SMOOTH_CHECKOUT"

MULTIPLE_REPOS="true"
if [[ -z "$(get_indirected_env "${PLUGIN_PREFIX}_REPOS_1_CONFIG_0_URL")" ]]; then
  MULTIPLE_REPOS="false"
fi

index=0
while true; do
  config_prefix="${PLUGIN_PREFIX}_REPOS_${index}_CONFIG"
  if [[ -z "$(get_indirected_env "${config_prefix}_0_URL")" ]]; then
    break
  fi
  cd "${BUILDKITE_BUILD_CHECKOUT_PATH}"
  checkout_repo "$config_prefix" "${MULTIPLE_REPOS}"
  index=$((index+1))
done

cd "${BUILDKITE_BUILD_CHECKOUT_PATH}"
