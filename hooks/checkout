#!/usr/bin/env bash

set -eo pipefail

if [[ "$BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_SKIP_CHECKOUT" == "true" ]]; then
    echo "--- :fast_forward: Skipping checkout"
    echo "Because 'skip_checkout' configuration was set as true in pipeline YAML"
    exit 0
fi

echo "--- :open_file_folder: Setting up workspace"
echo "Creating directory: $WORKSPACE"
mkdir -p "$WORKSPACE" && cd "$WORKSPACE"
echo "Setup completed successfully."


echo "--- :key: Setting up git and ssh"
if ! ssh-keygen -F github.com > /dev/null; then
  echo "github.com not found in known_hosts"
  mkdir -p /tmp
  TMP_FILE="$(mktemp /tmp/github_rsa.pub.XXXXXX)"
  ssh-keyscan -t rsa github.com > "$TMP_FILE"
  GH_PUBKEY_FINGERPRINT="$(ssh-keygen -lf "$TMP_FILE" | awk '{ print $2 }')"
  if [ "$GH_PUBKEY_FINGERPRINT" != "SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8" ]; then
    echo "FATAL: got wrong public key from keyscan"
    exit 1
  fi
  mkdir -p "$HOME/.ssh" && cat "$TMP_FILE" >> "$HOME/.ssh/known_hosts" && rm "$TMP_FILE"
  echo "github.com added to known_hosts"
fi


get_indirected_env() {
  local env_name="$1"

  env_ref="${env_name}"
  echo "${!env_ref}"
}

setup_git_repo() {
  set +e
  local CLONE_URL="$1"
  local CHECKOUT_REF="$2"
  local CLONE_DIR
  CLONE_DIR="$(echo "${CLONE_URL%/}" | awk -F '/' '{ print $NF }' | sed -e "s/\.git$//")"

  echo " :::: local clone location = $CLONE_DIR"
  echo " :::: git remote url = $CLONE_URL"

  git clone --no-checkout "$CLONE_URL" && cd "$CLONE_DIR"
  local EXIT_STATUS=$?
  if [[ $EXIT_STATUS -ne 0 ]]; then
    return $EXIT_STATUS
  fi

  if [ -z "${CHECKOUT_REF}" ]; then
    echo "Checking out branch: $BUILDKITE_BRANCH with $BUILDKITE_COMMIT"
    git fetch --force origin "$BUILDKITE_BRANCH" && git checkout --quiet --force "$BUILDKITE_BRANCH" && git reset --hard "$BUILDKITE_COMMIT"
    local EXIT_STATUS=$?
    if [[ $EXIT_STATUS -ne 0 ]]; then
      return $EXIT_STATUS
    fi
  else
    echo "Checking out ref: $CHECKOUT_REF"
    git fetch --force origin "$CHECKOUT_REF" && git checkout --quiet --force "$CHECKOUT_REF"
    local EXIT_STATUS=$?
    if [[ $EXIT_STATUS -ne 0 ]]; then
      return $EXIT_STATUS
    fi
  fi

  git log -n 1 --format="Repo checked out at %h %s"
  set -e
}

i=0
echo "--- :git: Checking out repository"
while true; do
  url="$(get_indirected_env "BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_CONFIG_${i}_URL")"
  ref="$(get_indirected_env "BUILDKITE_PLUGIN_SMOOTH_CHECKOUT_CONFIG_${i}_REF")"
  if [ -z "${url}" ]; then
    if [[ $EXIT_STATUS -eq 0 ]]; then
      break
    else
      exit $EXIT_STATUS
    fi
  fi

  setup_git_repo "$url" "$ref"
  EXIT_STATUS=$?
  if [[ $EXIT_STATUS -eq 0 ]]; then
    break
  fi

  i=$((i+=1))
done
